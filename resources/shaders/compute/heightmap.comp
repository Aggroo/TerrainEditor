

layout(std140, binding = 14) uniform LayerVariables
{
    vec4 layerStrength;
    uvec4 useFirstLayerAsMask;
	uvec4 blendModes;
	int numHeightmaps;
};

layout(binding=1, rgba16f) restrict writeonly uniform image2D heightmapOut;

uniform sampler2D heightmaps[5];

#include("common/blend.glsl")

layout(local_size_x=TILE_SIZE, local_size_y=TILE_SIZE, local_size_z=1) in;
void main(void)
{
    // get index in global work group i.e x,y position
	vec2 pixelCoords = gl_GlobalInvocationID.xy / vec2(imageSize(heightmapOut));
    float height = texture(heightmaps[0], pixelCoords).r;
	float mask = height;
	
 	for(int i = 1; i < numHeightmaps; i++)
	{
        float m = useFirstLayerAsMask[i-1] == 1 ? mask : 1;
		height = BlendFunction(height, texture(heightmaps[i], pixelCoords).r, blendModes[i-1]) * m * layerStrength[i-1];
    }

    vec4 pixel = vec4(height, height, height, 1.0);
    imageStore(heightmapOut, ivec2(gl_GlobalInvocationID.xy), pixel);
}